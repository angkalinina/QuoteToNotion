import time
from telegram import ReplyKeyboardMarkup, Update
import logging
import os
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from notion_client import Client
from keep_alive import keep_alive

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s",
    handlers=[logging.StreamHandler()]
)


logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]
NOTION_TOKEN = os.environ["NOTION_TOKEN"]
DATABASE_ID = os.environ["DATABASE_ID"]

notion = Client(auth=NOTION_TOKEN)
user_active_books = {}


def find_book_page_id(book_title):
    response = notion.databases.query(database_id=DATABASE_ID,
                                      filter={
                                          "property": "–ù–∞–∑–≤–∞–Ω–∏–µ",
                                          "rich_text": {
                                              "contains": book_title
                                          }
                                      })
    results = response.get("results")
    if results:
        return results[0]["id"]
    return None


def create_quote_page(book_page_id, quote_text):
    book_page = notion.pages.retrieve(page_id=book_page_id)
    props = book_page.get("properties", {})

    quote_url = None
    rich_text_field = props.get("–¶–∏—Ç–∞—Ç—ã", {}).get("rich_text", [])
    for item in rich_text_field:
        if "link" in item.get("text", {}):
            quote_url = item["text"]["link"]["url"]

    if not quote_url:
        new_quote_page = notion.pages.create(parent={
            "type": "page_id",
            "page_id": book_page_id
        },
                                             properties={
                                                 "title": [{
                                                     "type": "text",
                                                     "text": {
                                                         "content": "–¶–∏—Ç–∞—Ç—ã"
                                                     }
                                                 }]
                                             },
                                             children=[])
        quote_page_id = new_quote_page["id"]
        quote_url = f"https://www.notion.so/{quote_page_id.replace('-', '')}"

        notion.pages.update(page_id=book_page_id,
                            properties={
                                "–¶–∏—Ç–∞—Ç—ã": {
                                    "type":
                                    "rich_text",
                                    "rich_text": [{
                                        "type": "text",
                                        "text": {
                                            "content": "–¶–∏—Ç–∞—Ç—ã ‚Üí",
                                            "link": {
                                                "url": quote_url
                                            }
                                        }
                                    }]
                                }
                            })
    else:
        quote_page_id = quote_url.split("/")[-1]
        quote_page_id = f"{quote_page_id[:8]}-{quote_page_id[8:12]}-{quote_page_id[12:16]}-{quote_page_id[16:20]}-{quote_page_id[20:]}"

    notion.blocks.children.append(block_id=quote_page_id,
                                  children=[{
                                      "object": "block",
                                      "type": "bulleted_list_item",
                                      "bulleted_list_item": {
                                          "rich_text": [{
                                              "type": "text",
                                              "text": {
                                                  "content": quote_text
                                              }
                                          }]
                                      }
                                  }])


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["/book", "/quotes"], ["/current", "/reset"],
                ["/status", "/help"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ü–∏—Ç–∞—Ç—É ‚Äî —è –¥–æ–±–∞–≤–ª—é –µ—ë –≤ Notion üìö\n\n–ö–æ–º–∞–Ω–¥—ã:",
        reply_markup=reply_markup)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ† *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*\n\n"
        "üìå *–†–∞–±–æ—Ç–∞ —Å –∫–Ω–∏–≥–æ–π:*\n"
        "üìö /book <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –≤—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–∏–≥—É\n"
        "üìñ /current ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–Ω–∏–≥—É\n"
        "üóë /reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É\n\n"
        "üìù *–¶–∏—Ç–∞—Ç—ã:*\n"
        "üí¨ /quotes ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ü–∏—Ç–∞—Ç—ã –∏–∑ –∫–Ω–∏–≥–∏\n"
        "‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç ‚Äî –æ–Ω –¥–æ–±–∞–≤–∏—Ç—Å—è –∫–∞–∫ —Ü–∏—Ç–∞—Ç–∞\n\n"
        "üîß *–°–∏—Å—Ç–µ–º–∞:*\n"
        "‚öôÔ∏è /status ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤ —Å–µ—Ç–∏ –ª–∏ –±–æ—Ç\n"
        "üü∞ /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        parse_mode="Markdown")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        user_id = str(update.message.from_user.id)
        active_book = user_active_books.get(user_id, "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        book_page_id = find_book_page_id(active_book)

        if not book_page_id:
            await update.message.reply_text(
                f"‚ö†Ô∏è –ö–Ω–∏–≥–∞ '{active_book}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Notion.")
            return

        create_quote_page(book_page_id, text)
        await update.message.reply_text("‚úÖ –¶–∏—Ç–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞: {e}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞: {e}")


async def set_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    args = context.args
    if not args:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /book")
        return
    book_title = " ".join(args)
    user_active_books[user_id] = book_title
    await update.message.reply_text(
        f"üìö –ê–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–∏–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {book_title}")


async def reset_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    user_active_books.pop(user_id, None)
    await update.message.reply_text("üîÑ –ê–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–∏–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")


async def get_quotes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    active_book = user_active_books.get(user_id)
    if not active_book:
        await update.message.reply_text(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–Ω–∏–≥—É –∫–æ–º–∞–Ω–¥–æ–π /book.")
        return

    book_page_id = find_book_page_id(active_book)
    if not book_page_id:
        await update.message.reply_text(
            f"‚ö†Ô∏è –ö–Ω–∏–≥–∞ '{active_book}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Notion.")
        return

    book_page = notion.pages.retrieve(page_id=book_page_id)
    props = book_page.get("properties", {})
    quote_url = None
    rich_text_field = props.get("–¶–∏—Ç–∞—Ç—ã", {}).get("rich_text", [])
    for item in rich_text_field:
        if "link" in item.get("text", {}):
            quote_url = item["text"]["link"]["url"]

    if not quote_url:
        await update.message.reply_text("‚õî –£ —ç—Ç–æ–π –∫–Ω–∏–≥–∏ –µ—â—ë –Ω–µ—Ç —Ü–∏—Ç–∞—Ç.")
        return

    quote_page_id = quote_url.split("/")[-1]
    quote_page_id = f"{quote_page_id[:8]}-{quote_page_id[8:12]}-{quote_page_id[12:16]}-{quote_page_id[16:20]}-{quote_page_id[20:]}"
    blocks = notion.blocks.children.list(block_id=quote_page_id).get(
        "results", [])
    quotes = []
    for block in blocks:
        if block["type"] == "bulleted_list_item":
            texts = block["bulleted_list_item"]["rich_text"]
            content = "".join([t["text"]["content"] for t in texts])
            quotes.append(content)

    if quotes:
        reply = "\n\n".join(f"‚Ä¢ {q}" for q in quotes)
        await update.message.reply_text(
            f"üìñ –¶–∏—Ç–∞—Ç—ã –∏–∑ –∫–Ω–∏–≥–∏ *{active_book}*:\n\n{reply}",
            parse_mode="Markdown")
    else:
        await update.message.reply_text("üòï –¶–∏—Ç–∞—Ç—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")


async def current_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    book = user_active_books.get(user_id)
    if book:
        await update.message.reply_text(f"üìñ –°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–∏–≥–∞: *{book}*",
                                        parse_mode="Markdown")
    else:
        await update.message.reply_text(
            "üìñ –ö–Ω–∏–≥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /book, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—ë.")


async def bot_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üü¢ –ë–æ—Ç –≤ —Å–µ—Ç–∏ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")


def main():
    keep_alive()
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("book", set_book))
    app.add_handler(CommandHandler("current", current_book))
    app.add_handler(CommandHandler("reset", reset_book))
    app.add_handler(CommandHandler("quotes", get_quotes))
    app.add_handler(CommandHandler("status", bot_status))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã...")

    app.run_polling()

    logger.warning("‚ö†Ô∏è app.run_polling() –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å. –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω!")

    while True:
        logger.debug("üîÑ –ë–æ—Ç –∂–∏–≤–æ–π (–æ–∂–∏–¥–∞–Ω–∏–µ)...")
        time.sleep(60)


if __name__ == "__main__":
    main()

if __name__ == "__main__":
    main()
